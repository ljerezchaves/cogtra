--- a/config.mk
+++ b/config.mk
@@ -117,16 +117,17 @@ CONFIG_MAC80211=m
 # CONFIG_MAC80211_DEBUG_COUNTERS=y
 # CONFIG_MAC80211_DRIVER_API_TRACER=y
 
-# choose between pid and minstrel as default rate control algorithm
-CONFIG_MAC80211_RC_DEFAULT=minstrel_ht
-CONFIG_MAC80211_RC_DEFAULT_MINSTREL=y
-# CONFIG_MAC80211_RC_DEFAULT_PID=y
-# This is the one used by our compat-wireless net/mac80211/rate.c
-# in case you have and old kernel which is overriding this to pid.
-CONFIG_COMPAT_MAC80211_RC_DEFAULT=minstrel_ht
-# CONFIG_MAC80211_RC_PID=y
-CONFIG_MAC80211_RC_MINSTREL=y
-CONFIG_MAC80211_RC_MINSTREL_HT=y
+# Select in the next two lines which rate control algorithm to use
+CONFIG_MAC80211_RC_DEFAULT=cogtra
+CONFIG_COMPAT_MAC80211_RC_DEFAULT=cogtra
+CONFIG_MAC80211_RC_COGTRA=y
+CONFIG_MAC80211_RC_CORA=n
+CONFIG_MAC80211_RC_MINSTREL=n
+CONFIG_MAC80211_RC_MINSTREL_HT=n
+CONFIG_MAC80211_RC_ARF=n
+CONFIG_MAC80211_RC_AARF=n
+CONFIG_MAC80211_RC_PID=n
+
 ifdef CONFIG_LEDS_TRIGGERS
 CONFIG_MAC80211_LEDS=y
 endif #CONFIG_LEDS_TRIGGERS
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -1110,14 +1110,30 @@ static int __init ieee80211_init(void)
 	BUILD_BUG_ON(offsetof(struct ieee80211_tx_info, driver_data) +
 		     IEEE80211_TX_INFO_DRIVER_DATA_SIZE > sizeof(skb->cb));
 
-	ret = rc80211_minstrel_init();
+	ret = rc80211_cogtra_init();
 	if (ret)
 		return ret;
 
-	ret = rc80211_minstrel_ht_init();
+	ret = rc80211_cora_init();
+	if (ret)
+		goto err_cora;
+
+	ret = rc80211_arf_init();
+	if (ret)
+		goto err_arf;
+
+	ret = rc80211_aarf_init();
+	if (ret)
+		goto err_aarf;
+
+	ret = rc80211_minstrel_init();
 	if (ret)
 		goto err_minstrel;
 
+	ret = rc80211_minstrel_ht_init();
+	if (ret)
+		goto err_minstrel_ht;
+
 	ret = rc80211_pid_init();
 	if (ret)
 		goto err_pid;
@@ -1131,8 +1147,16 @@ static int __init ieee80211_init(void)
 	rc80211_pid_exit();
  err_pid:
 	rc80211_minstrel_ht_exit();
- err_minstrel:
+ err_minstrel_ht:
 	rc80211_minstrel_exit();
+ err_minstrel:
+	rc80211_aarf_exit();
+ err_aarf:
+	rc80211_arf_exit();
+ err_arf:
+	rc80211_cora_exit();
+ err_cora:
+	rc80211_cogtra_exit();
 
 	return ret;
 }
@@ -1142,6 +1166,10 @@ static void __exit ieee80211_exit(void)
 	rc80211_pid_exit();
 	rc80211_minstrel_ht_exit();
 	rc80211_minstrel_exit();
+	rc80211_cogtra_exit();
+	rc80211_cora_exit();
+	rc80211_arf_exit();
+	rc80211_aarf_exit();
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,37))
 	flush_scheduled_work();
--- a/net/mac80211/Makefile
+++ b/net/mac80211/Makefile
@@ -54,8 +54,24 @@ rc80211_minstrel-$(CONFIG_MAC80211_DEBUG
 rc80211_minstrel_ht-y := rc80211_minstrel_ht.o
 rc80211_minstrel_ht-$(CONFIG_MAC80211_DEBUGFS) += rc80211_minstrel_ht_debugfs.o
 
+rc80211_cogtra-y := rc80211_cogtra.o
+rc80211_cogtra-$(CONFIG_MAC80211_DEBUGFS) += rc80211_cogtra_debugfs.o
+
+rc80211_cora-y := rc80211_cora.o
+rc80211_cora-$(CONFIG_MAC80211_DEBUGFS) += rc80211_cora_debugfs.o
+
+rc80211_arf-y := rc80211_arf.o
+rc80211_arf-$(CONFIG_MAC80211_DEBUGFS) += rc80211_arf_debugfs.o
+
+rc80211_aarf-y := rc80211_aarf.o
+rc80211_aarf-$(CONFIG_MAC80211_DEBUGFS) += rc80211_aarf_debugfs.o
+
 mac80211-$(CONFIG_MAC80211_RC_PID) += $(rc80211_pid-y)
 mac80211-$(CONFIG_MAC80211_RC_MINSTREL) += $(rc80211_minstrel-y)
 mac80211-$(CONFIG_MAC80211_RC_MINSTREL_HT) += $(rc80211_minstrel_ht-y)
+mac80211-$(CONFIG_MAC80211_RC_COGTRA) += $(rc80211_cogtra-y)
+mac80211-$(CONFIG_MAC80211_RC_CORA) += $(rc80211_cora-y)
+mac80211-$(CONFIG_MAC80211_RC_ARF) += $(rc80211_arf-y)
+mac80211-$(CONFIG_MAC80211_RC_AARF) += $(rc80211_aarf-y)
 
 ccflags-y += -D__CHECK_ENDIAN__
--- a/net/mac80211/rate.h
+++ b/net/mac80211/rate.h
@@ -160,5 +160,57 @@ static inline void rc80211_minstrel_ht_e
 }
 #endif
 
+#ifdef CONFIG_MAC80211_RC_CORA
+extern int rc80211_cora_init(void);
+extern void rc80211_cora_exit(void);
+#else
+static inline int rc80211_cora_init(void)
+{
+	return 0;
+}
+static inline void rc80211_cora_exit(void)
+{
+}
+#endif
+
+#ifdef CONFIG_MAC80211_RC_COGTRA
+extern int rc80211_cogtra_init(void);
+extern void rc80211_cogtra_exit(void);
+#else
+static inline int rc80211_cogtra_init(void)
+{
+	return 0;
+}
+static inline void rc80211_cogtra_exit(void)
+{
+}
+#endif
+
+#ifdef CONFIG_MAC80211_RC_ARF
+extern int rc80211_arf_init(void);
+extern void rc80211_arf_exit(void);
+#else
+static inline int rc80211_arf_init(void)
+{
+	return 0;
+}
+static inline void rc80211_arf_exit(void)
+{
+}
+#endif
+
+#ifdef CONFIG_MAC80211_RC_AARF
+extern int rc80211_aarf_init(void);
+extern void rc80211_aarf_exit(void);
+#else
+static inline int rc80211_aarf_init(void)
+{
+	return 0;
+}
+static inline void rc80211_aarf_exit(void)
+{
+}
+#endif
+
 
 #endif /* IEEE80211_RATE_H */
